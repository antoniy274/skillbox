/*Старинная-добрая игра на страницах всех школьных тетрадей. 
Поле размером 3х3 представлено в виде двумерного массива с типом элементов char. 
Помните тот символьный тип из предыдущего модуля? Теперь он нам и пригодится. 
Участвуют два игрока, которые ходят по очереди и ставят в указанные ими 
в стандартном вводе координаты свой символ - ‘X’ или ‘O’ (буквы латинского алфавита). 
Как только у одного из игроков будет установлено подряд три крестика или три нолика - он побеждает. 
Если свободных клеток не осталось, а трёх совпадающих элементов не найдено - объявляется ничья. 
Для простоты, мы не будем рассматривать диагональные совпадения, а только строго вертикальные либо строго горизонтальные.

Изначально всё поле инициализируется символом пробела - ‘ ‘. Это можно сделать сразу при объявлении, 
либо с помощью вложенного цикла. На каждом ходе, при занятой клетке или при неверных координатах этой клетки 
должно быть выведено сообщение и игрок должен указать координаты клетки повторно. 
После каждого хода надо выводить в консоль текущее состояние всего игрового поля, для наглядности.

Сделаю ещё одну небольшую подсказку. Проверку на победу игрока, которую надо осуществлять после каждого хода, 
можно сделать с помощью вложенного цикла, сразу проверяя и вертикаль и горизонталь а как именно - попробуйте догадаться сами.*/
#include <iostream>

bool win(char arr[3][3]);

int main()
{
    char place[3][3];

    for (auto i = 0; i < 3; ++i) {
        for (auto j = 0; j < 3; ++j) {
            place[i][j] = '-';
        }
    }
    
    int x, y;
    char element;

     do {
         std::cin >> x >> y >> element;
        if ((x < 1 or x  > 3) && (y > 3 or y < 1) && (element != 'X' and element != 'O')) {
            std::cout << "Error. Retype\n";
            std::cin >> x >> y >> element;
        }

        else if (place[x - 1][y - 1] != '-') {
            std::cout << "Error. This cell is occupied. Retype\n";
            std::cin >> x >> y >> element;
        }
        else {
            place[x - 1][y - 1] = element;
            for (auto k = 0; k < 3; ++k) {
                for (auto m = 0; m < 3; ++m) {
                    std::cout << place[k][m] << ' ';
                }
                std::cout << '\n';
            }
        }
    } while (win(place) != true);
}

 
bool win(char arr[3][3])
    {
        int i;

        for (i = 0; i < 3; i++)  /* проверка строк */
            if (arr[i][0] == arr[i][1] &&
                arr[i][0] == arr[i][2] && (arr[i][0] == 'X' or arr[i][0] == 'O')) 
                return true;

        for (i = 0; i < 3; i++)  /* проверка столбцов */
            if (arr[0][i] == arr[1][i] &&
                arr[0][i] == arr[2][i] && (arr[0][i] == 'X' or arr[0][i] == 'O'))
                return true;

        /* проверка диагоналей */
        if (arr[0][0] == arr[1][1] &&
            arr[1][1] == arr[2][2] && (arr[0][0] == 'X' or arr[0][0] == 'O'))
            return true;

        if (arr[0][2] == arr[1][1] &&
            arr[1][1] == arr[2][0] && (arr[0][2] == 'X' or arr[0][2] == 'O'))
            return true;
    }