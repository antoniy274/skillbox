/*По поводу успешного прохождения двумерных массивов собирается банкет, организуется стол на 12 персон, 
2 из них - это места VIP, они расположены рядом друг к другу во главе стола. Стол протяжённый в длину, 
места расположены в два ряда. Каждый пришедший должен быть “упакован” соответствующим образом. 
Во-первых столовые приборы - их три на каждого человека (вилка, ложка, нож), 
плюс одна маленькая дополнительная ложечка для VIP-персон, для десерта. Это необходимо обеспечить. 
Следом тарелки, каждому по две - для первого и второго блюда, для VIP персон +1 тарелка для десерта. 
Ну и конечно стул - один для каждого, минимум! Заведите соответствующие двумерные массивы для количества приборов,
посуды и стульев и проинициализируйте их как следует.

Однако, это ещё не всё. В ходе банкета, уже после инициализации,
происходят некоторые события. Пришедшая на 5-ое место первого ряда дама пришла вместе с ребёнком 
и поэтому на данное место был приставлен ещё один стул. 
С третьего места во втором ряду в неизвестном направлении была украдена ложка. 
После этого одна из VIP персон (любая) поделилась своей ложкой с тем у кого она пропала, а сам стал есть суп десертной. 
За ненадобностью официант забрал у него одну десертную тарелку, ибо есть десерт ложкой, 
которая побывала уже в супе - не комильфо. Больше без происшествий!*/

#include <iostream>
#include <vector>

int main()
{
    std::vector<int> places[2][6];
    
    std::vector<int> cutlery[2][6]{ {{1,2,3}, {1,2,3}, {1,2,3}, {1,2,3}, {1,2,3},{1,2,3,4}},
                                    {{1,2,3}, {1,2,3}, {1,2,3}, {1,2,3}, {1,2,3},{1,2,3,4}} };

    std::vector<int> tableware[2][6]{ {{5,6}, {5,6}, {5,6}, {5,6}, {5,6},{5,6,7}},
                                      {{5,6}, {5,6}, {5,6}, {5,6}, {5,6},{5,6,7}} };

    std::vector<int> chairs[2][6]{ {{8}, {8}, {8}, {8}, {8},{8}},
                                   {{8}, {8}, {8}, {8}, {8},{8}} };

    for (auto i = 0; i < 2; ++i) {
        for (auto j = 0; j < 2; ++j) {
            chairs[0][4].push_back(8);
            
        }
    }
}
