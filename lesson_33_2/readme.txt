„то нужно сделать

–еализуйте простую игру-симул€цию ловли рыбы. »гровое поле представл€ет собой дев€ть секторов условного пруда. 
¬ начале игры в одном из этих секторов с помощью генератора случайных чисел оказываетс€ рыба. 
“очно так же, случайным образом, по секторам пруда распредел€ютс€ и три сапога. 
—апог и рыба при этом не могут находитьс€ в одном и том же секторе одновременно, как и несколько сапог сразу в одном из секторов.

»грок закидывает удочку с приманкой в один из секторов, номер которого вводитс€ стандартным способом через консоль.
«адача игрока Ч угадать сектор, в котором находитс€ рыба и, таким образом, поймать еЄ. ≈сли игрок попал на пустой сектор, 
то удочку надо забросить повторно. ≈сли игрок поймал сапог, то игра завершаетс€ с отрицательным результатом.

–еализовать задачу нужно с помощью исключений: когда успешный заброс удочки генерирует специальное пользовательское исключение,
после чего программа должна завершитьс€ и оповестить пользовател€ об успешной рыбалке и количестве попыток, 
которое ему дл€ этого потребовалось. ≈сли же был пойман сапог, то должно выводитьс€ сообщение о неудачной ловле.

–екомендации

¬спомните, что вы можете выбросить в качестве исключени€ произвольный тип данных. Ёто может быть и сапог, и рыба.

¬ функции main потребуетс€ расположить рыбу случайным образом. ƒл€ этого сделайте std::srand(std::time(nullptr)); 
а затем само расположение: field[std::rand() % 9].fish = new Fish(); Ѕлагодар€ оператору % вы не выйдете за пределы массива.